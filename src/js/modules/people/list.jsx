// Generated by LiveScript 1.3.1
(function(){
  var React, Panel, ActionRenderer, api, ref$, AccountBtn, PersonBtn, NewTable, Header, SemanticModal, filter, any, Dom, div, h3, span, a, i, Grid, CrudActions, customActions, cols, PeopleList;
  React = require('react');
  Panel = require('../../components/Panel');
  ActionRenderer = require('../../components/ActionRenderer');
  api = require('../../api/api');
  ref$ = require('../../molecules/ModalButtons'), AccountBtn = ref$.AccountBtn, PersonBtn = ref$.PersonBtn;
  NewTable = require('../../components/NewTable');
  Header = require('../../components/PageHeader');
  SemanticModal = require('../../components/SemanticModal');
  ref$ = require('prelude-ls'), filter = ref$.filter, any = ref$.any;
  Dom = React.DOM;
  div = Dom.div, h3 = Dom.h3, span = Dom.span, a = Dom.a, i = Dom.i;
  Grid = NewTable.Grid, CrudActions = NewTable.CrudActions;
  customActions = function(props){
    return AccountBtn({
      primary: true,
      icon: true,
      personId: props.row.id
    }, i({
      className: "icon settings"
    }));
  };
  cols = [
    {
      key: 'firstName',
      display: 'First Name'
    }, {
      key: 'middleName',
      display: 'Middle Name'
    }, {
      key: 'lastName',
      display: 'Last Name'
    }, {
      key: 'types',
      display: 'Types'
    }, {
      display: '',
      resourceType: "person",
      renderer: CrudActions,
      linkTo: "people",
      className: "right aligned",
      tdClassName: "right aligned",
      customActions: customActions
    }
  ];
  PeopleList = React.createClass({
    displayName: "PeopleList",
    getInitialState(){
      return {
        currentFilter: 'All',
        people: []
      };
    },
    componentDidMount(){
      return api.person.events.addListener("change", this.getPeople);
    },
    componentWillUnmount(){
      return api.person.events.removeListener("change", this.getPeople);
    },
    getPeople(){
      var this$ = this;
      return api.person.find().then(function(it){
        return this$.setState({
          people: it
        });
      });
    },
    componentWillMount(){
      return this.getPeople();
    },
    modal(){
      return CreatePersonModal(null);
    },
    renderFilterButton: function(name){
      var isActive, btnClassName, setActive, this$ = this;
      isActive = this.state.currentFilter === name;
      btnClassName = (function(){
        switch (isActive) {
        case true:
          return "ui active button";
        default:
          return "ui button";
        }
      }());
      setActive = function(){
        return this$.setState({
          currentFilter: name
        });
      };
      return div({
        className: btnClassName,
        onClick: setActive
      }, name);
    },
    renderGridTop(){
      return div(null, div({
        className: "ui basic tiny buttons"
      }, this.renderFilterButton("All"), this.renderFilterButton("Students"), this.renderFilterButton("Teachers"), this.renderFilterButton("Parents"), this.renderFilterButton("Admins")), PersonBtn({
        className: "ui right floated primary tiny button",
        label: "New",
        primary: true
      }));
    },
    filteredData(){
      var format, this$ = this;
      format = function(){
        return function(it){
          return it.slice(0, -1);
        }(
        this$.state.currentFilter);
      };
      if (this.state.currentFilter === 'All') {
        return this.state.people;
      } else {
        return filter(function(it){
          return in$(format(this$.state.currentFilter), it.types);
        })(
        this.state.people);
      }
    },
    render(){
      return div(null, Header({
        primary: "All People"
      }), div({
        className: "main container"
      }, div({
        className: "ui top attached segment"
      }, this.renderGridTop()), Grid({
        className: "bottom attached five column",
        columns: cols,
        data: this.filteredData()
      })));
    }
  });
  module.exports = PeopleList;
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
