// Generated by LiveScript 1.3.1
import React from "react";
import utils from "../utils/index";
import DeleteBtn from "./DeleteButton";

import api from "../api/api";

const get = function(obj, prop) {
  var parts, last;
  parts = prop.split(".");
  last = parts.pop();
  while ((prop = parts.shift())) {
    obj = obj[prop];
    if (typeof obj !== "object" || !obj) {
      return;
    }
  }
  return obj[last];
};

const formatVal = function(val, format) {
  if (typeof format === "function") {
    return format(val);
  }
  switch (format) {
    case "date":
      return utils.formatDate(val);
    case "decimalPercent":
      return Math.round(val * 100) || "";
    case val === undefined:
      return "empty";
    default:
      return val;
  }
};

class StringRenderer extends React.Component {
  state = {
    editing: false
  };

  render() {
    const val = formatVal(this.props.value, this.props.column.format);
    return <div>{val}</div>;
  }
}

class Grid extends React.Component {
  render() {
    const data = this.props.data;
    const cols = this.props.columns;

    const shouldRenderFooter = cols.some(x => !!x.footerRenderer);
    return (
      <div className="table-responsive">
        <table className="table" {...this.props}>
          <thead>
            <tr>
              {React.Children.map(this.props.children, (child, k) => {
                return <th key={k}>{child.props.children}</th>;
              })}
            </tr>
          </thead>
          <tbody>
            {data.map((row, rowI) => {
              let key = `row-${rowI}-${row.id}`;
              return (
                <tr key={key}>
                  {cols.map((column, columnI) => {
                    const Renderer = this.getRenderer(column, rowI, columnI);
                    return (
                      <td key={`cell=${rowI}-${columnI}`} className={column.tdClassName || ""}>
                        <Renderer
                          rowI={rowI}
                          row={row}
                          columnI={columnI}
                          column={column}
                          value={get(row, column.key || "")}
                        />
                      </td>
                    );
                  })}
                </tr>
              );
            })}
          </tbody>
          {shouldRenderFooter ? (
            <tfoot>
              <tr>{cols.map(this.renderFooter)}</tr>
            </tfoot>
          ) : null}
        </table>
      </div>
    );
  }

  getRenderer = column => {
    return column.renderer || StringRenderer;
  };

  renderHeader = (obj, index) => {
    // const Header = obj.display;
    //{obj.display || obj.key}
    return (
      <th key={"col-" + index} className={obj.className}>
        {obj.display || obj.key}
      </th>
    );
  };

  renderFooter = (obj, index) => {
    const Renderer = obj.footerRenderer;
    return (
      <td key={"col-foot-" + index} className={obj.className}>
        {Renderer ? <Renderer {...this.props} column={obj} /> : null}
      </td>
    );
  };
}

class Col extends React.Component {
  render() {
    return <div>{this.props.title}</div>;
  }
}

// <Header {... this.props} />

class CrudActions extends React.Component {
  handleDelete = e => {
    e.preventDefault();
    return api[this.props.column.resourceType].del(this.props.row.id);
  };

  render() {
    // const EditButton = this.props.editButton || (<span></span>);
    return <DeleteBtn onClick={this.handleDelete} />;
    // return div(null, DeleteBtn({
    //   onClick: this['delete']
    // }), typeof (ref$ = this.props.column).customActions == 'function' ? ref$.customActions(this.props) : void 8);
  }
}

module.exports = {
  Grid: Grid,
  Col: Col,
  CrudActions: CrudActions,
  StringRenderer: StringRenderer
};
