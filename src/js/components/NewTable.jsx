// Generated by LiveScript 1.3.1
import React from 'react';
import utils from '../utils/index';
import DeleteBtn from '../atoms/DeleteButton';

import api from '../api/api';

let get = function(obj, prop){
    var parts, last;
    parts = prop.split('.');
    last = parts.pop();
    while (prop = parts.shift()) {
      obj = obj[prop];
      if (typeof obj !== 'object' || !obj) {
        return;
      }
    }
    return obj[last];
  };
let formatVal = function(val, format){
    if (typeof format === 'function') {
      return format(val);
    }
    switch (format) {
    case 'date':
      return utils.formatDate(val);
    case 'decimalPercent':
      return Math.round(val * 100) || '';
    case val === undefined:
      return 'empty';
    default:
      return val;
    }
  };

  let StringRenderer = React.createClass({
      getInitialState(){
        return {
          editing: false
        };
      },
      render() {
        const val = formatVal(this.props.value, this.props.column.format);
        return (
          <div>
            {val}
          </div>
        );
      }
    });

let Grid = React.createClass({
    render(){
      const data = this.props.data;
      const cols = this.props.columns;

      const shouldRenderFooter = cols.some(x => !!x.footerRenderer);
      return (
        <div className="table-responsive">
          <table className="table" {... this.props}>
            <thead>
              <tr>
                {cols.map(this.renderHeader)}
              </tr>
            </thead>
            <tbody>
              {data.map((row, rowI) => {
                let key = `row-${rowI}-${row.id}`;
                return (
                  <tr key={key}>
                    {cols.map((column, columnI) => {
                      const Renderer = this.getRenderer(column, rowI, columnI);
                      return (
                        <td
                          key={`cell=${rowI}-${columnI}`}
                          className={column.tdClassName || ''} >
                          <Renderer
                            rowI={rowI}
                            row={row}
                            columnI={columnI}
                            column={column}
                            value={get(row, column.key || '')}/>
                        </td>
                      );
                    })}
                  </tr>
                );
              })}
            </tbody>
            {shouldRenderFooter ? (
              <tfoot>
                <tr>
                  {cols.map(this.renderFooter)}
                </tr>
              </tfoot>
            ) : null}

          </table>
        </div>
      );
    },
    getRenderer: function(column){
      return column.renderer || StringRenderer;
    },
    renderHeader: function(obj, index){
      return (
        <th key={'col-' + index}
          className={obj.className}>
          {obj.display || obj.key}

        </th>
      );
    },
    renderFooter: function(obj, index){
      const Renderer = obj.footerRenderer;
      return (
        <td key={'col-foot-' + index}
          className={obj.className}>
          {Renderer ? <Renderer {... this.props} column={obj} /> : null}
        </td>
      );
    }
  });

let CrudActions = React.createClass({
    handleDelete: function(e){
      e.preventDefault();
      return api[this.props.column.resourceType].del(this.props.row.id);
    },
    render(){
      return (
        <DeleteBtn onClick={this.handleDelete}/>
      );
    }
});

  module.exports = {
    Grid: Grid,
    CrudActions: CrudActions,
    StringRenderer: StringRenderer
  };
