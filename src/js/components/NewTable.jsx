// Generated by LiveScript 1.3.1
import React from 'react';

import api from '../api/api';
import p from 'prelude-ls';

import utils from '../utils/index';
import DeleteBtn from '../atoms/DeleteButton';

let get = function(obj, prop){
    var parts, last;
    parts = prop.split('.');
    last = parts.pop();
    while (prop = parts.shift()) {
      obj = obj[prop];
      if (typeof obj !== 'object' || !obj) {
        return;
      }
    }
    return obj[last];
  };
let formatVal = function(val, format){
    if (typeof format === 'function') {
      return format(val);
    }
    switch (format) {
    case 'date':
      return utils.formatDate(val);
    case 'decimalPercent':
      return Math.round(val * 100) || "";
    case val === undefined:
      return "empty";
    default:
      return val;
    }
  };

  let StringRenderer = React.createClass({
      getInitialState(){
        return {
          editing: false
        };
      },
      handleChange: function(event){
        ({
          value: event.target.value,
          column: this.props.column,
          row: this.props.row
        });
      },
      render() {
        const val = formatVal(this.props.value, this.props.column.format);
        return (
          <div>
            {val}
          </div>
        )
      }
      // render(){
      //   var val;
      //   val = formatVal(this.props.value, this.props.column.format);
      //   if (this.state.editing) {
      //     return (
      //       <div>
      //
      //       </div>
      //     )
      //     return div(null, div({
      //       className: "ui action input small"
      //     }, input({
      //       type: "text",
      //       value: val,
      //       onChange: this.handleChange
      //     }), div({
      //       className: "ui button tiny",
      //       onClick: this.toggle
      //     }, "x")));
      //   } else {
      //     return div(null, val);
      //   }
      // },
      // toggle(){
      //   this.setState({
      //     editing: !this.state.editing
      //   });
      // }
    });

let Grid = React.createClass({
    getInitialState(){
      return {
        sortByIndex: null,
        sortDirection: true
      };
    },
    render(){
      const data = this.props.data;
      const cols = this.props.columns;

      return (
        <div className="table-responsive">
          <table className="table" {... this.props}>
            <thead>
              <tr>
                {cols.map(this.renderHeader)}
              </tr>
            </thead>
            <tbody>
              {data.map((row, rowI) => {
                let key = `row-${rowI}-${row.id}`;
                return (
                  <tr key={key}>
                    {cols.map((column, columnI) => {
                      const Renderer = this.getRenderer(column, rowI, columnI);
                      return (
                        <td
                          key={"cell-" + rowI + "-" + columnI}
                          className={column.tdClassName || ""} >
                          <Renderer
                            rowI={rowI}
                            row={row}
                            columnI={columnI}
                            column={column}
                            value={get(row, column.key || "")}/>
                        </td>
                      );
                    })}
                  </tr>
                );
              })}
            </tbody>
            <tfoot>
              <tr>
                {cols.map(this.renderFooter)}
              </tr>
            </tfoot>
          </table>
        </div>
      );
      // return table({
      //   className: "ui compact table",
      //   ... this.props
      // }, thead(null, tr(null, cols.map(this.renderHeader))), tbody(null, data.map(function(row, rowI){
      //   return tr({
      //     key: "row-" + rowI + "-" + row.id
      //   }, cols.map(function(column, columnI){
      //     var result;
      //     result = getRenderer(column, rowI, columnI)({
      //       rowI: rowI,
      //       row: row,
      //       columnI: columnI,
      //       column: column,
      //       value: get(row, column.key || "")
      //     });
      //     return td({
      //       key: "cell-" + rowI + "-" + columnI,
      //       className: (column.tdClassName || "") + ""
      //     }, result);
      //   }));
      // })));
    },
    getRenderer: function(column){
      return column.renderer || StringRenderer;
    },
    renderHeader: function(obj, index){
      return (
        <th key={'col-' + index}
          className={obj.className}>
          {obj.display || obj.key}
        </th>
      );
    },
    renderFooter: function(obj, index){
      const Renderer = obj.footerRenderer;
      return (
        <td key={'col-foot-' + index}
          className={obj.className}>
          {Renderer ? <Renderer {... this.props} column={obj} /> : null}
        </td>
      );
    }
  });

let CrudActions = React.createClass({
    'delete': function(e){
      e.preventDefault();
      return api[this.props.column.resourceType].del(this.props.row.id);
    },
    render(){
      // const EditButton = this.props.editButton || (<span></span>);
      return (
          <DeleteBtn onClick={this.delete}/>
      );
      // return div(null, DeleteBtn({
      //   onClick: this['delete']
      // }), typeof (ref$ = this.props.column).customActions == 'function' ? ref$.customActions(this.props) : void 8);
    }
});

let CellLink = React.createClass({
    render(){
      let linkTo = this.props.column.linkTo;
      let params = {termId: termId, resourceId: this.props.row.id}

      return (
        <div>
          <Link to={linkTo} params={params}>
            {this.props.value}
          </Link>
        </div>
      );
    }
  });

  module.exports = {
    Grid: Grid,
    CrudActions: CrudActions,
    StringRenderer: StringRenderer,
    CellLink: CellLink
  };
