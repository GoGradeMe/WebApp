// Generated by LiveScript 1.3.1
(function(){
  var React, api, autocomplete, Dom, div, Autocomplete, Option, AssignmentType, SchoolTerms, GradeLevel, ProfileTypes;
  React = require('react');
  api = require('../api/api');
  autocomplete = require('./autocomplete');
  Dom = React.DOM;
  div = Dom.div;
  Autocomplete = autocomplete.Autocomplete, Option = autocomplete.Option;
  AssignmentType = React.createClass({
    getInitialState: function(){
      return {
        types: null
      };
    },
    componentWillMount: function(){
      var this$ = this;
      return api.type.find().then(function(it){
        return this$.setState({
          types: it
        });
      });
    },
    renderOptions: function(){
      if (this.state.types) {
        return this.state.types.map(function(item, rId){
          return Option({
            key: rId,
            value: item.id,
            label: item.name + ""
          });
        });
      } else {
        return div(null, "Loading...");
      }
    },
    render: function(){
      return this.transferPropsTo(Autocomplete({
        placeholder: "Type",
        dropdown: true
      }, this.renderOptions()));
    }
  });
  SchoolTerms = React.createClass({
    displayName: "SchoolTerms",
    getInitialState: function(){
      return {
        terms: null
      };
    },
    componentWillMount: function(){
      var this$ = this;
      return api.term.find().then(function(it){
        return this$.setState({
          terms: it
        });
      });
    },
    handleChange: function(it){
      return this.props.onChange({
        target: {
          value: [it.target.value]
        }
      });
    },
    renderOptions: function(){
      if (this.state.terms) {
        return this.state.terms.map(function(item, rId){
          return Option({
            key: rId,
            value: item.id,
            label: item.name + " - " + item.schoolYear
          });
        });
      } else {
        return div(null, "Loading...");
      }
    },
    render: function(){
      return div(null, Autocomplete({
        onChange: this.handleChange,
        placeholder: "Term",
        dropdown: true
      }, this.renderOptions()));
    }
  });
  GradeLevel = React.createClass({
    displayName: "GradeLevel",
    getInitialState: function(){
      return {
        grades: ["1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th", "10th", "11th", "12th"]
      };
    },
    renderOptions: function(){
      return this.state.grades.map(function(item, rId){
        return Option({
          key: rId,
          value: item,
          label: item + ""
        });
      });
    },
    handleChange: function(it){
      return this.props.onChange({
        target: {
          value: it.target.value
        }
      });
    },
    render: function(){
      return this.transferPropsTo(Autocomplete({
        onChange: this.handleChange,
        placeholder: "Grade Level",
        dropdown: true
      }, this.renderOptions()));
    }
  });
  ProfileTypes = React.createClass({
    displayName: "ProfileTypes",
    getInitialState: function(){
      return {
        types: ["Student", "Teacher", "Parent", "Other", "Admin"]
      };
    },
    handleChange: function(it){
      return this.props.onChange({
        target: {
          value: [it.target.value]
        }
      });
    },
    renderOptions: function(){
      return this.state.types.map(function(item, rId){
        return Option({
          key: rId,
          value: item,
          label: item + ""
        });
      });
    },
    render: function(){
      return this.transferPropsTo(Autocomplete({
        onChange: this.handleChange,
        placeholder: "Type",
        dropdown: true
      }, this.renderOptions()));
    }
  });
  module.exports = {
    AssignmentType: AssignmentType,
    GradeLevel: GradeLevel,
    ProfileTypes: ProfileTypes,
    SchoolTerms: SchoolTerms
  };
}).call(this);
